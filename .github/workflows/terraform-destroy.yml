name: Terraform Destroy (simple con aprobación)

on:
  workflow_dispatch:
    inputs:
      working_directory:
        description: "Carpeta con main.tf"
        default: "."
        required: true
      addresses:
        description: "Direcciones exactas (una por línea). Ej: module.net.azurerm_public_ip.pip_app"
        required: false
      patterns:
        description: "Nombres o prefijos (una por línea). Ej: network_security_group_2, vm_import_, pip-qa-"
        required: false
      mode:
        description: "Cómo casar 'patterns': prefix | exact | regex"
        default: "prefix"
        required: true

env:
  TF_IN_AUTOMATION: true
  ARM_TENANT_ID:     ${{ secrets.AZURE_TENANT_ID }}
  ARM_CLIENT_ID:     ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_ACCESS_KEY:    ${{ secrets.ARM_ACCESS_KEY }}

jobs:
  plan:
    runs-on: ubuntu-latest
    outputs:
      TARGET_ARGS: ${{ steps.build.outputs.TARGET_ARGS }}
    defaults:
      run:
        working-directory: ${{ github.event.inputs.working_directory }}

    steps:
      - uses: actions/checkout@v4

      - uses: azure/login@v2
        with:
          allow-no-subscriptions: true
          creds: >
            {"clientId":"${{ secrets.AZURE_CLIENT_ID }}",
             "clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}",
             "tenantId":"${{ secrets.AZURE_TENANT_ID }}"}

      - uses: hashicorp/setup-terraform@v3

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Terraform Init
        run: |
          terraform init -input=false \
            -backend-config="resource_group_name=terraform" \
            -backend-config="storage_account_name=xpeterraformpoc" \
            -backend-config="container_name=terraform-tfstate" \
            -backend-config="key=${{ github.ref_name }}.tfstate"

      - name: Build targets (simple)
        id: build
        shell: bash
        run: |
          set -euo pipefail

          norm_lines () { printf "%s" "$1" | tr '\r' '\n' | sed '/^[[:space:]]*$/d'; }
          declare -A DEDUP; add(){ [ -z "$1" ] || DEDUP["$1"]=1; }

          ADDR_RAW='${{ github.event.inputs.addresses }}'
          PATT_RAW='${{ github.event.inputs.patterns }}'
          MODE='${{ github.event.inputs.mode }}'

          mapfile -t ADDRS < <( [ -n "${ADDR_RAW:-}" ] && norm_lines "$ADDR_RAW" || true )
          mapfile -t PATTS < <( [ -n "${PATT_RAW:-}" ] && norm_lines "$PATT_RAW" || true )

          # 1) Direcciones exactas (si las hay)
          for a in "${ADDRS[@]:-}"; do add "-target=$a"; done

          # 2) Resolver por nombre/prefijo/regex desde el tfstate (si hay patrones)
          if [ ${#PATTS[@]} -gt 0 ]; then
            terraform state pull > state.json
            for nm in "${PATTS[@]}"; do
              mapfile -t MATCHES < <(jq -r --arg name "$nm" --arg mode "$MODE" '
                .resources[]? as $r
                | ($r.module // "") as $mod
                | $r.instances[]? as $i
                | (
                    if $mode=="exact" then
                      ((($i.index_key? // "")==$name)
                       or (((($i.index?|type)=="string") and ($i.index==$name)))
                       or ((($i.attributes.name? // "")==$name)))
                    elif $mode=="prefix" then
                      ((($i.index_key? // "")|startswith($name))
                       or (((($i.index?|type)=="string") and (($i.index|tostring)|startswith($name))))
                       or ((($i.attributes.name? // "")|startswith($name))))
                    else
                      ((($i.index_key? // "")|test($name))
                       or (((($i.index?|type)=="string") and (($i.index|tostring)|test($name))))
                       or ((($i.attributes.name? // "")|test($name))))
                    end
                  )
                | [
                    ($mod|length>0?($mod+"."):""),
                    $r.type,".",$r.name,
                    (if ($i.index_key? // null)!=null then "[" + "\"" + $i.index_key + "\"" + "]"
                     elif ($i.index? // null)!=null then "[" + (if ($i.index|type)=="string" then "\"" + $i.index + "\"" else ($i.index|tostring) end) + "]"
                     else "" end)
                  ] | join("")
              ' state.json)
              for addr in "${MATCHES[@]:-}"; do add "-target=$addr"; done
            done
          fi

          # Salir si no hay nada
          if [ ${#DEDUP[@]} -eq 0 ]; then
            echo "❌ No se construyeron targets. Proporciona 'addresses' o 'patterns'." >&2
            exit 1
          fi

          TARGET_ARGS=""
          for k in "${!DEDUP[@]}"; do TARGET_ARGS="$TARGET_ARGS $k"; done
          echo "TARGET_ARGS=$TARGET_ARGS" >> "$GITHUB_OUTPUT"
          echo "Targets:$TARGET_ARGS"

      - name: Plan (destroy targeted)
        run: terraform plan -destroy -input=false ${{ steps.build.outputs.TARGET_ARGS }} -out=tfplan-destroy

      - name: Resumen (qué se eliminará)
        run: |
          terraform show -json tfplan-destroy > plan.json
          echo "## Recursos a eliminar" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "| Tipo | Nombre | RG | Address |" >> "$GITHUB_STEP_SUMMARY"
          echo "|------|--------|----|---------|" >> "$GITHUB_STEP_SUMMARY"
          jq -r '
            (.resource_changes // [])
            | map(select(.change.actions|index("delete")))
            | .[]
            | {
                t: .type,
                n: (.change.before.name // .change.after.name // .name // "(sin-name)"),
                rg:(.change.before.resource_group_name // .change.before.resource_group // "(n/a)"),
                a: .address
              }
            | "| \(.t) | \(.n) | \(.rg) | `\(.a)` |"
          ' plan.json >> "$GITHUB_STEP_SUMMARY"

      - uses: actions/upload-artifact@v4
        with:
          name: tfplan-destroy
          path: tfplan-destroy

  approve:
    # Protege con reviewers en Settings → Environments
    environment: prd-destroy
    runs-on: ubuntu-latest
    needs: plan
    steps:
      - run: echo "Revisa el Summary del job 'plan' y aprueba para continuar."

  destroy:
    runs-on: ubuntu-latest
    needs: [plan, approve]
    defaults:
      run:
        working-directory: ${{ github.event.inputs.working_directory }}
    steps:
      - uses: actions/checkout@v4
      - uses: azure/login@v2
        with:
          allow-no-subscriptions: true
          creds: >
            {"clientId":"${{ secrets.AZURE_CLIENT_ID }}",
             "clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}",
             "tenantId":"${{ secrets.AZURE_TENANT_ID }}"}
      - uses: hashicorp/setup-terraform@v3
      - name: Terraform Init
        run: |
          terraform init -input=false \
            -backend-config="resource_group_name=terraform" \
            -backend-config="storage_account_name=xpeterraformpoc" \
            -backend-config="container_name=terraform-tfstate" \
            -backend-config="key=${{ github.ref_name }}.tfstate"
      - name: Destroy (aprobado)
        run: terraform destroy -input=false -auto-approve ${{ needs.plan.outputs.TARGET_ARGS }}
